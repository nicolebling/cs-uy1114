import super_secret_module


def is_impostor(information, corrupter_function):
    copy_list = corrupter_function
    if id(information) == id(copy_list):
        return False
    for index in range(len(information)):
        if type(information[i]) == list:
            if id(information[i]) == id(copy_list[i]):
                return False
    return True


def main():
    original_list = [1, 2, 3]
    print(is_impostor(original_list, super_secret_module.corrupter(original_list, False)))

main()
***
----------------------------------------------------------------------------------------------------
***
import random

def get_random_word(filepath):
    try:
        open_file = open(filepath, 'r')
    except FileNotFoundError:
        print("WARINING! The file cannot be found.")
    else:
        combined_word = []
        for line in open_file:
            line = line.split()
            combined_word += line
        print(combined_word)
        random_number = random.randrange(len(combined_word))

    return combined_word[random_number]

def main():
    print(get_random_word("words.txt"))
if __name__ == '__main__':
    main()
***
----------------------------------------------------------------------------------------------------
***
import random

def shuffle_create(list_one):
    new_shuffle_create = list_one.copy()
    #print(new_shuffle_create)
    length_of_the_list = len(new_shuffle_create)
    for element in range(length_of_the_list - 1, 0, -1):
        i = random.randint(0, element + 1)
        new_shuffle_create[element], new_shuffle_create[i] = new_shuffle_create[i], new_shuffle_create[element]

    return new_shuffle_create

def shuffle_in_place(list_two):
    length_of_list2 = len(list_two)
    for elements in range(length_of_list2 - 1, 0, -1):
        j = random.randint(0, elements + 1)
        list_two[elements], list_two[j] = list_two[j], list_two[elements]
    return list_two

def main():
    list_one = ["Jean Valjean", "Javert", "Fantine", "Cosette", "Marius Pontmercy", "Eponine", "Enjolras"]
    print("ORIGINAL LIST_ONE: {}".format(list_one))
 # First function execution
    print("LIST CREATED BY SHUFFLE_CREATE: {}\n".format(shuffle_create(list_one)))
    list_two = ["A", 0, 0, 5, 1, 3, 2]
    print("ORIGINAL LIST_TWO: {}".format(list_two))
 # Second function execution
    shuffle_in_place(list_two)
    print("LIST_TWO AFTER SHUFFLE_IN_PLACE: {}".format(list_two))
main()
***
----------------------------------------------------------------------------------------------------
***
def organize_into_profits_losses(lst):
    profit_lost = []
    curr = []
    is_streak_positive = lst[0] > 0

    for element in lst:
        is_element_postiive = element > 0
        if is_element_postiive == is_streak_positive:
            curr.append(element)
        else:
            is_streak_positive = element > 0
            profit_lost.append(curr)
            curr = [element]

    profit_lost.append(curr)
    return profit_lost

def spending_statistics(lst_lst):
    profit = 0
    loss = 0
    balance = 0

    for lst in lst_lst:
        if lst[0] > 0:
            profit += 1
        else:
            loss += 1
        for element in lst:
            balance += element

    print(f"You have had {profit} periods of sub")
    print(f"You agve gad {loss} periods of sub")
    print(f"Total balance: {balance}")

    if balance < 0:
        print("you need to spend less")
    else:
        print("keep it up.")


def main():
    weeks_lst = [1, 4, -2, 3, -3, -5, 3]
    organized_weeks_lst = organize_into_profits_losses(weeks_lst)
    print("Here are your spending habits over the last few weeks:", organized_weeks_lst)
    spending_statistics(organized_weeks_lst)

main()
