#Q1:Nucleotidal Arithmetic

def update_frequencies(before, after):
    num_nucleotides = ""
    new_frequencies = []
    for char in before:
        count = 0
        for i in range(len(after)):
            if char[0] == after[i] and after[i] != "0":
                count += 1
        if count != 0:
            num_nucleotides += char[0] + " -> " + str(count) + " | ";
            after = after.replace(char[0], "0").strip()
            new_frequencies.append((char[0], char[1] + count))
    print('Number of nucleotides added:', num_nucleotides[:-3])
    return new_frequencies

def main():
    old_frequencies = [("A", 20), ("C", 23), ("T", 125), ("G", 4)]
    new_sequence = "ACCCGTTA"
    new_frequencies = update_frequencies(old_frequencies, new_sequence)
    print(new_frequencies)
main()
***
----------------------------------------------------------------------------
***
Q2: haiku format?
def is_haiku(poem):
        line = poem.split("/")
        if len(line) != 3:
                print(f"Warning: The total number of line is {line}, this is not a haiku.")
                return False
        if len(line[0].split(",")) != 5:
                print("Warning: the first line is not 5 syllables long.\nFalse")
                return False
        if len(line[1].split(",")) != 7:
                print("Warning: the second line is not 5 syllables long.\nFalse")
                return False
        if len(line[2].split(",")) != 5:
                return("Warning: the third line is not 5 syllables long.\nFalse")
                return False
        return True

def haiku_string_parser(string):
    if is_haiku(string) != True:
        return ""
    else:
        if "/" in string:
            string = string.replace(",", "")
            string = string.replace("/", "\n")
        return string

def main():
    haiku_string = "clouds ,mur,mur ,dar,ly/it ,is ,a ,blin,ding, ha,bit/ga,zing ,at ,the ,moon"
    formatted_haiku = haiku_string_parser(haiku_string)
    print(formatted_haiku)
main()
***
----------------------------------------------------------------------------
***
#Q4: Gradescope logic
import statistics
def get_list_of_grades(grades_filepath):
    try:
        grade_file = open(grades_filepath, 'r')
    except FileNotFoundError:
        return []
    grades_data = grade_file.readlines()
    grades = []
    for line in grades_data:
        line = line.strip().split(",")
        if line[0].isdigit():
            grades.append(list(map(float, line[-6:])))
    return grades

def generate_statistics_report(grades_filepath, stats_filepath):
    grades = get_list_of_grades(grades_filepath)
    if not grades:
        return
    question_numbers = ["Q1_1", "Q1_2", "Q2_1", "Q2_2", "Q2_3","Q2_4", "Q2_5", "Q2_6", "Q3_1", "Q3_2", "Q3_3", "Q3_4", "Q3_5", "Q3_6", "Q4", "Q5", "Q6"]
    stat_file = open(stats_filepath, 'w')
    for i in question_numbers:
        question_grades = [grade[i] for grade in grades]
        mean = round(statistics.mean(question_grades), 2)
        std_dev = round(statistics.stdev(question_grades), 2)
        median = round(statistics.median(question_grades), 2)
        print(f"{mean},{std_dev},{median}\n", file=stats_file)
def main():
    grades = get_list_of_grades("Midterm1_scores.csv")
    print(grades)
    generate_statistics_report("Midterm1_scores.csv", "stats.csv")
main()
***
----------------------------------------------------------------------------
***
#Q5: Matryoshka Lists
def get_matryoshka_list(original_list):
    length_of_list = len(original_list)
    matryoshka_list = []
    another_list = []
    for x in range(0, length_of_list - 1):
        if(original_list[x] < original_list[x + 1]):
            another_list.append(original_list[x])
            if (x == (length_of_list - 2)):
                another_list.append(original_list[length_of_list - 1])
                matryoshka_list.append(another_list)
        else:
            another_list.append(original_list[x])
            matryoshka_list.append(another_list)
            another_list = []

            if (x == (length_of_list - 2)):
                another_list.append(original_list[length_of_list - 1])
                matryoshka_list.append(another_list)

    return matryoshka_list

def main():
    original_list = [1, 2, 3, 5, 20, 19, 3, 4, 7, 45, 100, 1, 1, 3]
    matryoshka_list = get_matryoshka_list(original_list)
    print(matryoshka_list)

main()
